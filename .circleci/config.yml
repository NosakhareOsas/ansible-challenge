version: 2.1
# Use a package of configuration called an orb.
orbs:
  # Choose either one of the orbs below
  #welcome: circleci/welcome-orb@0.4.1
  aws-cli: circleci/aws-cli@3.1
#define commands for reuseability
commands:
   destroy_environment:
     steps:
       - run:
           name: Destroy environment
           # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
           # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
           when: on_fail
           command: |
             aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7}
# Define the jobs we want to run for this project
jobs:
  create_infrastructure: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} \
              --region ${AWS_DEFAULT_REGION}
  
  configure_infrastructure: 
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          # You can get this ID in the section where you registered the SSH Key
          fingerprints: ["42:9b:13:73:74:e3:6b:ad:14:2c:0f:76:28:f9:5e:e8"] 
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible     
      - run:
          name: Run Playbook and Configure server
          command: |
              ansible-playbook main-remote.yml -i inventory

  smoke_test_if:
    docker:
      - image: alpine:latest
    steps:
      - run: 
          name: install curl
          command: apk add --update curl
      - run:
          name: smoke test
          command: |
            URL="https://blog.udacity.com/"
            # Test if website exists
            if curl -s --head ${URL} 
            then
              return 0
            else
              return 1
            fi
  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run:
          name: Test job
          # Fail the job intentionally to simulate an error.
          command:  return 1
      - destroy_environment
         
            

# Sequential workflow
workflows:
  # Name the workflow
  myWorkflow:
    jobs:
      - create_infrastructure
      - smoke_test:
          requires: 
            - create_infrastructure

      #- configure_infrastructure
      
      